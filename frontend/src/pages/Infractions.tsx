import { useState, useRef, useEffect, useCallback } from 'react';
import { 
  Search, Plus, Trash2, Car, 
  Phone, MapPin, FileText, Clock, Calendar,
  X, Upload, AlertTriangle, Maximize2,
  XCircle
} from 'lucide-react';
import CloseButton from '../components/CloseButton';
import DatePicker, { registerLocale } from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import { fr } from 'date-fns/locale';
import { setHours, setMinutes } from 'date-fns'; // Import setHours and setMinutes
import EditButton from '../components/EditButton';
import { Vehicle } from './Vehicles';
import { Customer } from './Customers';
import axios from 'axios';
import toast from 'react-hot-toast';
import FileUploader, { Document, FilePreview } from '../components/FileUploader'; // Import FileUploader and Document

registerLocale('fr', fr);

const formatDateToFrench = (dateString: string | undefined): string => {
  if (!dateString) return '';
  const date = new Date(dateString);
  if (isNaN(date.getTime())) return '';
  return date.toLocaleDateString('fr-FR', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
  });
};

// Use the Document interface from FileUploader for consistency
type InfractionDocument = Document;

type InfractionType = {
  _id: string;
  vehicle: Vehicle | null; // Allow vehicle to be null
  infractionDate: string;
  timeInfraction: string;
  infractionNumber?: string;
  location: string;
  date: string;
  customer: Customer | null; // Allow client to be null
  permis: string;
  cin: string;
  passeport: string;
  type: 'professional' | 'particular';
  societe: string;
  telephone: string;
  telephone2: string;
  attachments: string[];
  documents?: InfractionDocument[]; // Use InfractionDocument (which is Document)
};

const moroccanCities = [
  'Casablanca', 'Rabat', 'Marrakech', 'Fès', 'Tanger', 'Agadir', 
  'Meknès', 'Oujda', 'Kénitra', 'Tétouan', 'Safi', 'El Jadida',
  'Nador', 'Mohammedia', 'Béni Mellal', 'Témara', 'Khémisset'
];


const InfractionForm = ({ 
  onSubmit, 
  onClose, 
  initialData = null,
  vehicles,
  customers,
  onRemoveExistingDocument
}: { 
  onSubmit: (data: Partial<InfractionType>, newFiles: File[]) => void;
  onClose: () => void;
  initialData?: InfractionType | null;
  vehicles: Vehicle[];
  customers: Customer[];
  onRemoveExistingDocument: (infractionId: string, docToRemove: Document) => Promise<void>;
}) => {
  const [newAttachmentFiles, setNewAttachmentFiles] = useState<File[]>([]);
  const [existingDocuments, setExistingDocuments] = useState<InfractionDocument[]>(initialData?.documents || []);
  
  const parseTimeString = (timeString: string): Date | null => {
    if (!timeString) return null;
    const [hours, minutes] = timeString.split(':').map(Number);
    const date = setHours(setMinutes(new Date(), minutes), hours);
    return date;
  };

  const formatTimeToString = (date: Date | null): string => {
    if (!date) return '';
    const hours = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');
    return `${hours}:${minutes}`;
  };

  const [formData, setFormData] = useState<Partial<InfractionType>>(() => {
    const defaultData: Partial<InfractionType> = {
      vehicle: null, // Initialize with null
      infractionDate: new Date().toISOString().split('T')[0],
      timeInfraction: '',
      // infractionNumber will be generated by the backend
      // infractionNumber: '',
      location: '',
      date: new Date().toISOString().split('T')[0],
      customer: null,
      permis: '',
      cin: '',
      passeport: '',
      type: 'particular',
      societe: '',
      telephone: '',
      telephone2: '',
      attachments: [],
      documents: [],
    };
    if (initialData) {
      const selectedVehicle = vehicles.find(v => v._id === initialData.vehicle?._id) || null;
      const selectedClient = customers.find(c => c._id === initialData.customer?._id);
      return {
        ...initialData,
        vehicle: selectedVehicle, // Set vehicle to null if not found
        date: initialData.date ? new Date(initialData.date).toISOString().split('T')[0] : defaultData.date,
        permis: selectedClient?.numeroPermis || '',
        cin: initialData.cin || selectedClient?.cin || '',
        passeport: initialData.passeport || selectedClient?.numeroPasseport || '',
        type: initialData.type || (selectedClient?.type === 'Professionnel' ? 'professional' : 'particular'),
        societe: initialData.societe || (selectedClient?.type === 'Professionnel' ? `${selectedClient.prenomFr} ${selectedClient.nomFr}` : ''),
        telephone: initialData.telephone || selectedClient?.telephone || '',
        telephone2: initialData.telephone2 || selectedClient?.telephone2 || '',
      };
    }
    return defaultData;
  });

  useEffect(() => {
    if (initialData) {
      const selectedVehicle = vehicles.find(v => v._id === initialData.vehicle?._id) || null;
      const selectedClient = customers.find(c => c._id === initialData.customer?._id);
      setFormData({
        ...initialData,
        infractionDate: initialData.infractionDate ? new Date(initialData.infractionDate).toISOString().split('T')[0] : '',
        date: initialData.date ? new Date(initialData.date).toISOString().split('T')[0] : '',
        vehicle: selectedVehicle, // Set vehicle to null if not found
        permis: selectedClient?.numeroPermis || '',
        cin: initialData.cin || selectedClient?.cin || '',
        passeport: initialData.passeport || selectedClient?.numeroPasseport || '',
        type: initialData.type || (selectedClient?.type === 'Professionnel' ? 'professional' : 'particular'),
        societe: initialData.societe || (selectedClient?.type === 'Professionnel' ? `${selectedClient.prenomFr} ${selectedClient.nomFr}` : ''),
        telephone: initialData.telephone || selectedClient?.telephone || '',
        telephone2: initialData.telephone2 || selectedClient?.telephone2 || '',
      });
      setExistingDocuments(initialData.documents || []);
    } else {
      setFormData({
        vehicle: null, // Initialize with null
        infractionDate: new Date().toISOString().split('T')[0],
        timeInfraction: '',
        // infractionNumber will be generated by the backend
        // infractionNumber: '',
        location: '',
        date: new Date().toISOString().split('T')[0],
        customer: null,
        permis: '',
        cin: '',
        passeport: '',
        type: 'particular',
        societe: '',
        telephone: '',
        telephone2: '',
        attachments: [],
        documents: [],
      });
      setExistingDocuments([]);
    }
    setNewAttachmentFiles([]); // Clear uploaded files on initialData change
  }, [initialData, vehicles, customers]);

  useEffect(() => {
    return () => {
      newAttachmentFiles.forEach(file => URL.revokeObjectURL(URL.createObjectURL(file)));
      existingDocuments.forEach(doc => {
        if (doc.url.startsWith('blob:')) {
          URL.revokeObjectURL(doc.url);
        }
      });
    };
  }, [newAttachmentFiles, existingDocuments]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleDateChange = (date: Date | null, name: string) => {
    setFormData(prev => ({ ...prev, [name]: date ? date.toISOString().split('T')[0] : '' }));
  };


  const handleClientSelectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const clientId = e.target.value;
    const selectedClient = customers.find(c => c._id === clientId);
    setFormData(prev => ({
      ...prev,
      customer: selectedClient,
      permis: selectedClient?.numeroPermis || '',
      cin: selectedClient?.cin || '',
      passeport: selectedClient?.numeroPasseport || '',
      type: (selectedClient?.type === 'Professionnel' ? 'professional' : 'particular'),
      societe: (selectedClient?.type === 'Professionnel' ? `${selectedClient.prenomFr} ${selectedClient.nomFr}` : ''),
      telephone: selectedClient?.telephone || '',
      telephone2: selectedClient?.telephone2 || '',
    }));
  };

  const handleRemoveExistingDocument = async (docToRemove: Document) => {
    if (!initialData?._id) {
      // If it's a newly added file not yet saved to backend
      setNewAttachmentFiles(prev => prev.filter(file => URL.createObjectURL(file) !== docToRemove.url));
      setExistingDocuments(prev => prev.filter(doc => doc.url !== docToRemove.url));
      return;
    }

    // If it's an existing document from the backend
    await onRemoveExistingDocument(initialData._id, docToRemove);
    setExistingDocuments(prev => prev.filter(doc => doc.url !== docToRemove.url)); // Update local state after successful backend removal
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    const infractionData: Partial<InfractionType> = {
      ...formData,
      // attachments will be handled by the backend based on uploaded files
      documents: existingDocuments // Only include existing documents here
    };

    onSubmit(infractionData, newAttachmentFiles); // Pass newAttachmentFiles to onSubmit
  };

  const API_URL_INFRACTIONS = 'http://localhost:5000/api/infractions'; // Define API_URL for FileUploader

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto relative">
        <CloseButton onClick={onClose} />
        <h2 className="text-xl font-bold mb-6">
          {initialData ? 'Modifier l\'infraction' : 'Ajouter une infraction'}
        </h2>

        <form className="space-y-6" onSubmit={handleSubmit}>
          {/* Section Détails de l'infraction */}
          <div className="bg-gray-50 p-4 rounded-lg">
            <h3 className="text-lg font-semibold mb-4">Détails de l'infraction</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {/* N° Infraction field is now hidden and generated automatically by the backend */}
              {/* <div>
                <label htmlFor="infractionNumber" className="block mb-1">N° Infraction (*)</label>
                <input
                  type="text"
                  name="infractionNumber"
                  id="infractionNumber"
                  value={formData.infractionNumber || ''}
                  onChange={handleChange}
                  className="w-full border rounded p-2 bg-gray-100"
                  readOnly
                />
              </div> */}
              <div>
                <label htmlFor="infractionDate" className="block mb-1">Date Infraction (*)</label>
                <DatePicker
                  selected={formData.infractionDate ? new Date(formData.infractionDate) : null}
                  onChange={(date) => handleDateChange(date, 'infractionDate')}
                  locale="fr"
                  dateFormat="dd/MM/yyyy"
                  className="w-full border rounded p-2"
                  required
                />
              </div>
              <div>
                <label htmlFor="timeInfraction" className="block mb-1">Heure Infraction</label>
                <DatePicker
                  selected={parseTimeString(formData.timeInfraction || '')}
                  onChange={(date) => setFormData(prev => ({ ...prev, timeInfraction: formatTimeToString(date) }))}
                  showTimeSelect
                  showTimeSelectOnly
                  timeIntervals={15}
                  timeCaption="Heure"
                  dateFormat="HH:mm"
                  locale="fr"
                  className="w-full border rounded p-2"
                />
              </div>
              <div>
                <label htmlFor="location" className="block mb-1">Fait à (*)</label>
                <select
                  name="location"
                  id="location"
                  value={formData.location || ''}
                  onChange={handleChange}
                  className="w-full border rounded p-2"
                  required
                >
                  <option value="">Sélectionner une ville</option>
                  {moroccanCities.map(city => (
                    <option key={city} value={city}>{city}</option>
                  ))}
                </select>
              </div>
              <div>
                <label htmlFor="date" className="block mb-1">Fait le (*)</label>
                <DatePicker
                  selected={formData.date ? new Date(formData.date) : null}
                  onChange={(date) => handleDateChange(date, 'date')}
                  locale="fr"
                  dateFormat="dd/MM/yyyy"
                  className="w-full border rounded p-2"
                  required
                />
              </div>
            </div>
          </div>

          {/* Section Véhicule */}
          <div className="bg-gray-50 p-4 rounded-lg">
            <h3 className="text-lg font-semibold mb-4">Véhicule</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label htmlFor="vehicle" className="block mb-1">Véhicule</label>
                <select
                  name="vehicle"
                  id="vehicle"
                  className="w-full border rounded p-2"
                  value={formData.vehicle?._id || ''}
                  onChange={(e) => {
                    const selected = vehicles.find(v => v._id === e.target.value);
                    setFormData(prev => ({
                      ...prev,
                      vehicle: selected || null,
                    }));
                  }}
                >
                  <option value="">Sélectionner un véhicule</option>
                  {vehicles.map(vehicle => (
                    <option key={vehicle._id} value={vehicle._id}>
                      {`${vehicle.licensePlate} - ${vehicle.brand} ${vehicle.model}`}
                    </option>
                  ))}
                </select>
              </div>
              <div>
                <label htmlFor="vehicleDisplay" className="block mb-1">Modèle et Matricule</label>
                <input
                  type="text"
                  name="vehicleDisplay"
                  id="vehicleDisplay"
                  className="w-full border rounded p-2 bg-gray-100"
                  value={formData.vehicle ? `${formData.vehicle.brand} ${formData.vehicle.model} (${formData.vehicle.licensePlate})` : ''}
                  readOnly
                />
              </div>
            </div>
          </div>

          {/* Section Client */}
          <div className="bg-gray-50 p-4 rounded-lg">
            <h3 className="text-lg font-semibold mb-4">Client</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              <div>
                <label htmlFor="customer" className="block mb-1">Client (*)</label>
                <select
                  name="customer"
                  id="customer"
                  required
                  className="w-full border rounded p-2"
                  value={formData.customer?._id || ''}
                  onChange={handleClientSelectChange}
                >
                  <option value="">Sélectionner un client</option>
                  {customers.map(customer => (
                    <option key={customer._id} value={customer._id}>
                      {`${customer.prenomFr} ${customer.nomFr}`}
                    </option>
                  ))}
                </select>
              </div>
              <div>
                <label htmlFor="permis" className="block mb-1">Permis</label>
                <input
                  type="text"
                  name="permis"
                  id="permis"
                  className="w-full border rounded p-2 bg-gray-100"
                  value={formData.permis || ''}
                  readOnly
                />
              </div>
              <div>
                <label htmlFor="cin" className="block mb-1">CIN</label>
                <input
                  type="text"
                  name="cin"
                  id="cin"
                  value={formData.cin || ''}
                  onChange={handleChange}
                  className="w-full border rounded p-2"
                  readOnly={!!formData.customer}
                />
              </div>
              <div>
                <label htmlFor="passeport" className="block mb-1">Passeport</label>
                <input
                  type="text"
                  name="passeport"
                  id="passeport"
                  value={formData.passeport || ''}
                  onChange={handleChange}
                  className="w-full border rounded p-2"
                  readOnly={!!formData.customer}
                />
              </div>
              <div>
                <label htmlFor="type" className="block mb-1">Type de Client (*)</label>
                <select
                  name="type"
                  id="type"
                  value={formData.type || 'particular'}
                  onChange={handleChange}
                  className="w-full border rounded p-2"
                  required
                  disabled={!!formData.customer}
                >
                  <option value="particular">Particulier</option>
                  <option value="professional">Professionnel</option>
                </select>
              </div>
              {formData.type === 'professional' && (
                <div>
                  <label htmlFor="societe" className="block mb-1">Société</label>
                  <input
                    type="text"
                    name="societe"
                    id="societe"
                    value={formData.societe || ''}
                    onChange={handleChange}
                    className="w-full border rounded p-2"
                    readOnly={!!formData.customer}
                  />
                </div>
              )}
              <div>
                <label htmlFor="telephone" className="block mb-1">Téléphone</label>
                <input
                  type="text"
                  name="telephone"
                  id="telephone"
                  value={formData.telephone || ''}
                  onChange={handleChange}
                  className="w-full border rounded p-2"
                  readOnly={!!formData.customer}
                />
              </div>
              <div>
                <label htmlFor="telephone2" className="block mb-1">Téléphone 2</label>
                <input
                  type="text"
                  name="telephone2"
                  id="telephone2"
                  value={formData.telephone2 || ''}
                  onChange={handleChange}
                  className="w-full border rounded p-2"
                  readOnly={!!formData.customer}
                />
              </div>
            </div>
          </div>

          {/* Section Pièces Jointes */}
          <div className="bg-gray-50 p-4 rounded-lg">
            <h3 className="text-lg font-semibold mb-4">Pièces Jointes</h3>
            <FileUploader
              api_url={API_URL_INFRACTIONS}
              newFiles={newAttachmentFiles}
              onNewFilesChange={setNewAttachmentFiles}
              existingDocuments={existingDocuments}
              onRemoveExistingDocument={handleRemoveExistingDocument}
              readOnly={false}
              label=""
            />
          </div>

          <div className="flex justify-end space-x-4">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 border rounded hover:bg-gray-100"
            >
              Annuler
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
            >
              {initialData ? 'Modifier' : 'Ajouter'} Infraction
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

const Infractions = () => {
  const [infractions, setInfractions] = useState<InfractionType[]>([]);
  const [vehicles, setVehicles] = useState<Vehicle[]>([]);
  const [customers, setCustomers] = useState<Customer[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showModalForm, setShowModalForm] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [startDateFilter, setStartDateFilter] = useState<Date | null>(null); // Added date filters
  const [endDateFilter, setEndDateFilter] = useState<Date | null>(null); // Added date filters
  const [selectedInfraction, setSelectedInfraction] = useState<InfractionType | null>(null);
  const [editMode, setEditMode] = useState(false);
  const [editedInfraction, setEditedInfraction] = useState<InfractionType | null>(null);
  const [newAttachmentFiles, setNewAttachmentFiles] = useState<File[]>([]);

  const API_URL = 'http://localhost:5000'; // Base API URL for FileUploader
  const API_URL_INFRACTIONS = `${API_URL}/api/infractions`;
  const API_URL_VEHICLES = `${API_URL}/api/vehicles`;
  const API_URL_CUSTOMERS = `${API_URL}/api/customers`;

  const parseTimeString = (timeString: string): Date | null => {
    if (!timeString) return null;
    const [hours, minutes] = timeString.split(':').map(Number);
    const date = setHours(setMinutes(new Date(), minutes), hours);
    return date;
  };

  const formatTimeToString = (date: Date | null): string => {
    if (!date) return '';
    const hours = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');
    return `${hours}:${minutes}`;
  };

  const fetchData = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const [infractionsRes, vehiclesRes, customersRes] = await Promise.all([
        axios.get<InfractionType[]>(API_URL_INFRACTIONS),
        axios.get<Vehicle[]>(API_URL_VEHICLES),
        axios.get<Customer[]>(API_URL_CUSTOMERS)
      ]);

      setInfractions(infractionsRes.data);
      setVehicles(vehiclesRes.data);
      setCustomers(customersRes.data);
    } catch (err) {
      console.error('Error fetching data:', err);
      setError('Failed to load data.');
      toast.error('Failed to load data.');
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  const filteredInfractions = infractions.filter(infraction => {
    const clientName = infraction.customer ? `${infraction.customer.prenomFr} ${infraction.customer.nomFr}`.toLowerCase() : '';
    const vehicleLicensePlate = infraction.vehicle?.licensePlate?.toLowerCase() || '';
    const vehicleModel = infraction.vehicle?.model?.toLowerCase() || '';
    const infractionNumber = infraction.infractionNumber?.toLowerCase() || '';

    const matchesSearch =
      vehicleLicensePlate.includes(searchTerm.toLowerCase()) ||
      vehicleModel.includes(searchTerm.toLowerCase()) ||
      clientName.includes(searchTerm.toLowerCase()) ||
      infractionNumber.includes(searchTerm.toLowerCase());

    const infractionDate = new Date(infraction.infractionDate);
    const matchesStartDate = startDateFilter ? infractionDate >= startDateFilter : true;
    const matchesEndDate = endDateFilter ? infractionDate <= endDateFilter : true;

    return matchesSearch && matchesStartDate && matchesEndDate;
  });

  const handleAddInfraction = async (data: Partial<InfractionType>, newFiles: File[]) => {
    try {
      const formData = new FormData();
      
      if (data.customer) {
        formData.append('customer', data.customer._id);
      }
      if (data.vehicle) {
        formData.append('vehicle', data.vehicle._id);
      }

      Object.keys(data).forEach(key => {
        const typedKey = key as keyof Partial<InfractionType>;
        if (typedKey !== 'customer' && typedKey !== 'vehicle' && typedKey !== 'documents' && data[typedKey] !== undefined) {
          formData.append(key, String(data[typedKey]));
        }
      });

      if (data.documents) {
        data.documents.forEach(doc => formData.append('existingDocuments', doc.url));
      }

      newFiles.forEach(file => {
        formData.append('attachments', file);
      });

      const response = await axios.post<InfractionType>(API_URL_INFRACTIONS, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      
      const newInfraction = response.data;
      setInfractions([...infractions, newInfraction]);
      setShowModalForm(false);
      toast.success('Infraction added successfully.');
      setNewAttachmentFiles([]);
    } catch (err) {
      console.error('Error adding infraction:', err);
      toast.error('Failed to add infraction.');
    }
  };

  const handleUpdateInfraction = async (data: Partial<InfractionType>, newFiles: File[]) => {
    if (selectedInfraction) {
      try {
        const formData = new FormData();
        
        if (data.customer) {
          formData.append('customer', data.customer._id);
        }
        if (data.vehicle) {
          formData.append('vehicle', data.vehicle._id);
        }

        Object.keys(data).forEach(key => {
          const typedKey = key as keyof Partial<InfractionType>;
          if (typedKey !== 'customer' && typedKey !== 'vehicle' && typedKey !== 'documents' && data[typedKey] !== undefined) {
            formData.append(key, String(data[typedKey]));
          }
        });

        if (data.documents) {
          data.documents.forEach(doc => {
            if (!doc.isNew) {
              formData.append('existingDocuments', doc.url);
            }
          });
        }

        newFiles.forEach(file => {
          formData.append('attachments', file);
        });

        const response = await axios.put<InfractionType>(`${API_URL_INFRACTIONS}/${selectedInfraction._id}`, formData, {
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        });
        
        const updatedInfraction = response.data;
        setInfractions(infractions.map(inf => (inf._id === updatedInfraction._id ? updatedInfraction : inf)));
        setSelectedInfraction(updatedInfraction);
        setShowModalForm(false);
        setEditMode(false);
        setEditedInfraction(null);
        setNewAttachmentFiles([]);
        toast.success('Infraction updated successfully.');
      } catch (err) {
        console.error('Error updating infraction:', err);
        toast.error('Failed to update infraction.');
      }
    }
  };

  const handleDeleteInfraction = async (infractionId: string) => {
    if (confirm('Êtes-vous sûr de vouloir supprimer cette infraction ?')) {
      try {
        await axios.delete(`${API_URL_INFRACTIONS}/${infractionId}`);
        setInfractions(infractions.filter(inf => inf._id !== infractionId));
        setSelectedInfraction(null);
        toast.success('Infraction deleted successfully.');
      } catch (err) {
        console.error('Error deleting infraction:', err);
        toast.error('Failed to delete infraction.');
      }
    }
  };

  const handleRemoveExistingDocument = async (infractionId: string, docToRemove: Document) => {
    try {
      await axios.delete(`${API_URL_INFRACTIONS}/${infractionId}/documents`, {
        data: { documentName: docToRemove.name }
      });
      setInfractions(prevInfractions =>
        prevInfractions.map(inf =>
          inf._id === infractionId
            ? { ...inf, documents: inf.documents?.filter(doc => doc.url !== docToRemove.url) }
            : inf
        )
      );
      setSelectedInfraction(prev => {
        if (!prev || prev._id !== infractionId) return prev;
        return { ...prev, documents: prev.documents?.filter(doc => doc.url !== docToRemove.url) };
      });
      toast.success('Document supprimé avec succès.');
    } catch (err) {
      console.error('Erreur lors de la suppression du document:', err);
      toast.error('Échec de la suppression du document.');
    }
  };
  
  if (loading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <p className="text-lg text-gray-600">Loading infractions...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex flex-col justify-center items-center h-screen text-red-600">
        <p className="text-lg">{error}</p>
        <button
          onClick={fetchData}
          className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
        >
          Retry
        </button>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center space-y-4 sm:space-y-0">
        <h1 className="text-2xl font-bold text-gray-900">Infractions</h1>
        <button 
          onClick={() => {
            setSelectedInfraction(null);
            setShowModalForm(true);
          }}
          className="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          <Plus size={16} className="mr-2" />
          Nouvelle Infraction
        </button>
      </div>

      {/* Filters */}
      <div className="bg-white p-4 rounded-lg shadow">
        <div className="flex flex-wrap items-end gap-4">
          <div className="flex-1 min-w-[200px]">
            <label htmlFor="search-infraction" className="sr-only">Rechercher une infraction</label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <Search size={18} className="text-gray-400" />
              </div>
              <input
                id="search-infraction"
                type="text"
                placeholder="Rechercher une infraction..."
                className="pl-10 px-4 py-2 block w-full shadow-sm focus:ring-blue-500 focus:border-blue-500 border-gray-300 rounded-md"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
          </div>
          <div className="flex-1 min-w-[150px]">
            <label htmlFor="start-date-filter" className="text-sm font-medium text-gray-700 mb-1 block">Date de début</label>
            <DatePicker
              id="start-date-filter"
              selected={startDateFilter}
              onChange={(date: Date | null) => setStartDateFilter(date)}
              dateFormat="dd/MM/yyyy"
              locale="fr"
              showPopperArrow={false}
              placeholderText="jj/mm/aaaa"
              className="border rounded-lg p-2 w-full"
            />
          </div>
          <div className="flex-1 min-w-[150px]">
            <label htmlFor="end-date-filter" className="text-sm font-medium text-gray-700 mb-1 block">Date de fin</label>
            <DatePicker
              id="end-date-filter"
              selected={endDateFilter}
              onChange={(date: Date | null) => setEndDateFilter(date)}
              dateFormat="dd/MM/yyyy"
              locale="fr"
              showPopperArrow={false}
              placeholderText="jj/mm/aaaa"
              className="border rounded-lg p-2 w-full"
            />
          </div>
        </div>
      </div>
      
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2">
          <div className="bg-white shadow overflow-x-auto rounded-lg">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Véhicule
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Infraction
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Client
                  </th>
                  <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredInfractions.map((infraction) => (
                  <tr 
                    key={infraction._id} 
                    className={`hover:bg-gray-50 cursor-pointer ${
                      selectedInfraction?._id === infraction._id ? 'bg-blue-50' : ''
                    }`}
                    onClick={() => {
                      if (editMode && selectedInfraction?._id !== infraction._id) {
                        if (confirm('Vous avez des modifications non enregistrées. Voulez-vous continuer et perdre ces modifications?')) {
                          setSelectedInfraction(infraction);
                          setEditMode(false);
                          setEditedInfraction(null);
                          setNewAttachmentFiles([]);
                        }
                      } else if (!editMode) {
                        setSelectedInfraction(infraction);
                      }
                    }}
                  >
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="md:block overflow-x-auto md:overflow-visible">
                        <div className="flex items-center min-w-[220px] md:min-w-0">
                          <div className="flex-shrink-0 h-10 w-10">
                            {infraction.vehicle?.imageUrl ? (
                              <img
                                src={infraction.vehicle.imageUrl.startsWith('data:') ? infraction.vehicle.imageUrl : `${API_URL}/${infraction.vehicle.imageUrl.replace(/\\/g, '/')}`}
                                alt={`${infraction.vehicle.brand || 'N/A'} ${infraction.vehicle.model || 'N/A'}`}
                                className="w-10 h-10 object-cover rounded-full"
                              />
                            ) : (
                              <Car size={24} className="mx-auto mt-2 text-gray-500" />
                            )}
                          </div>
                          <div className="ml-4">
                            <div className="text-sm font-medium text-gray-900">{infraction.vehicle?.licensePlate || 'N/A'}</div>
                            <div className="text-xs text-gray-500">{infraction.vehicle ? `${infraction.vehicle.brand} ${infraction.vehicle.model}` : 'N/A'}</div>
                          </div>
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4">
                      <div className="text-sm font-medium text-gray-900">{infraction.infractionNumber}</div>
                      <div className="text-xs text-gray-500 mt-1 flex items-center">
                        <Calendar size={14} className="mr-1 text-gray-500" /> 
                        {formatDateToFrench(infraction.infractionDate)}
                      </div>
                    </td>
                    <td className="px-6 py-4">
                      <div className="text-sm font-medium text-gray-900">{infraction.customer ? `${infraction.customer.prenomFr} ${infraction.customer.nomFr}` : 'N/A'}</div>
                      <div className="text-xs text-gray-500 mt-1 flex items-center">
                        <MapPin size={14} className="mr-1 text-gray-500" /> 
                        {infraction.location || 'N/A'}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <EditButton
                        onClick={(e) => {
                          e.stopPropagation();
                          setSelectedInfraction(infraction);
                          const existingDocs: Document[] = (infraction.documents || []).map(doc => ({
                            name: doc.name,
                            url: doc.url,
                            type: doc.type,
                            size: doc.size,
                            isNew: false,
                          }));
                          setEditedInfraction({ ...infraction, documents: existingDocs });
                          setNewAttachmentFiles([]);
                          setEditMode(true);
                        }}
                        size="md"
                        className="mr-3"
                      />
                      <button onClick={(e) => { e.stopPropagation(); handleDeleteInfraction(infraction._id); }}>
                        <Trash2 size={18} />
                      </button>
                    </td>
                  </tr>
                ))}
                {infractions.length === 0 && (
                  <tr>
                    <td colSpan={4} className="px-6 py-4 text-center text-gray-500">
                      Aucune infraction trouvée.
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
        
        <div className="lg:col-span-1">
          {selectedInfraction ? (
            <div className="bg-white shadow rounded-lg">
              <div className="border-b border-gray-200 p-4 flex justify-between items-center">
                <h2 className="text-lg font-medium">Détails de l'infraction</h2>
                {editMode ? (
                  <div className="flex space-x-2">
                    <button
                      type="button"
                      onClick={() => {
                        if (confirm('Êtes-vous sûr de vouloir annuler les modifications ?')) {
                          setEditMode(false);
                          setEditedInfraction(null);
                          setNewAttachmentFiles([]);
                        }
                      }}
                      className="px-3 py-1 border rounded-lg text-sm"
                    >
                      Annuler
                    </button>
                    <button
                      type="button"
                      onClick={() => {
                        if (editedInfraction) {
                          handleUpdateInfraction(editedInfraction, newAttachmentFiles);
                        }
                      }}
                      className="px-3 py-1 bg-blue-600 text-white rounded-lg text-sm"
                    >
                      Enregistrer
                    </button>
                  </div>
                ) : (
                  <button
                    type="button"
                    onClick={() => {
                      const existingDocs: Document[] = (selectedInfraction.documents || []).map(doc => ({
                        name: doc.name,
                        url: doc.url,
                        type: doc.type,
                        size: doc.size,
                        isNew: false,
                      }));
                      setEditedInfraction({ ...selectedInfraction, documents: existingDocs });
                      setNewAttachmentFiles([]);
                      setEditMode(true);
                    }}
                    className="px-3 py-1 bg-blue-600 text-white rounded-lg text-sm"
                  >
                    Modifier
                  </button>
                )}
              </div>
              {editMode && editedInfraction ? (
                <form
                  id="infraction-edit-form"
                  onSubmit={(e) => {
                    e.preventDefault();
                    if (editedInfraction) handleUpdateInfraction(editedInfraction, newAttachmentFiles);
                  }}
                >
                  <div className="p-4 space-y-4">
                    <div>
                      <label htmlFor="vehicle" className="block text-sm font-medium text-gray-700 mb-1">Véhicule</label>
                        <select
                          id="vehicle"
                          name="vehicle"
                          className="w-full border rounded-lg p-2"
                          value={editedInfraction.vehicle?._id || ''}
                          onChange={(e) => {
                            const selectedVehicle = vehicles.find(v => v._id === e.target.value);
                            setEditedInfraction({ ...editedInfraction, vehicle: selectedVehicle || null });
                          }}
                        >
                          <option value="">Sélectionner un véhicule</option>
                          {vehicles.map(v => (
                            <option key={v._id} value={v._id}>{v.licensePlate} - {v.model}</option>
                          ))}
                        </select>
                    </div>
                    {/* N° Infraction field is now hidden and generated automatically by the backend */}
                    {/* <div>
                      <label htmlFor="infractionNumber" className="block text-sm font-medium text-gray-700 mb-1">N° Infraction</label>
                      <input type="text" name="infractionNumber" id="infractionNumber" className="w-full border rounded-lg p-2 bg-gray-100" value={editedInfraction.infractionNumber || ''} readOnly />
                    </div> */}
                    <div>
                      <label htmlFor="infractionDate" className="block text-sm font-medium text-gray-700 mb-1">Date Infraction</label>
                      <DatePicker selected={editedInfraction.infractionDate ? new Date(editedInfraction.infractionDate) : null} onChange={(date) => setEditedInfraction({ ...editedInfraction, infractionDate: date ? date.toISOString().split('T')[0] : '' })} dateFormat="dd/MM/yyyy" locale="fr" className="w-full border rounded-lg p-2" />
                    </div>
                    <div>
                      <label htmlFor="timeInfraction" className="block text-sm font-medium text-gray-700 mb-1">Heure Infraction</label>
                      <DatePicker selected={parseTimeString(editedInfraction.timeInfraction || '')} onChange={(date) => setEditedInfraction({ ...editedInfraction, timeInfraction: formatTimeToString(date) })} showTimeSelect showTimeSelectOnly timeIntervals={15} timeCaption="Heure" dateFormat="HH:mm" locale="fr" className="w-full border rounded-lg p-2" />
                    </div>
                    <div>
                      <label htmlFor="location" className="block text-sm font-medium text-gray-700 mb-1">Fait à</label>
                      <select name="location" id="location" className="w-full border rounded-lg p-2" value={editedInfraction.location || ''} onChange={(e) => setEditedInfraction({ ...editedInfraction, location: e.target.value })}>
                        <option value="">Sélectionner une ville</option>
                        {moroccanCities.map(city => (<option key={city} value={city}>{city}</option>))}
                      </select>
                    </div>
                    <div>
                      <label htmlFor="date" className="block text-sm font-medium text-gray-700 mb-1">Fait le</label>
                      <DatePicker selected={editedInfraction.date ? new Date(editedInfraction.date) : null} onChange={(date) => setEditedInfraction({ ...editedInfraction, date: date ? date.toISOString().split('T')[0] : '' })} dateFormat="dd/MM/yyyy" locale="fr" className="w-full border rounded-lg p-2" />
                    </div>
                    <div className="p-4 border-t mt-4">
                      <h3 className="font-medium mb-2">Informations Client</h3>
                      <div>
                      <label htmlFor="customer" className="block text-sm font-medium text-gray-700 mb-1">Client</label>
                        <select name="customer" id="customer" className="w-full border rounded-lg p-2" value={editedInfraction.customer?._id || ''} onChange={(e) => {
                          const selectedClient = customers.find(c => c._id === e.target.value);
                          setEditedInfraction({ ...editedInfraction, customer: selectedClient || null });
                        }}>
                          <option value="">Sélectionner un client</option>
                          {customers.map(customer => (<option key={customer._id} value={customer._id}>{`${customer.prenomFr} ${customer.nomFr}`}</option>))}
                        </select>
                      </div>
                      <div>
                        <label htmlFor="cin" className="block text-sm font-medium text-gray-700 mb-1">CIN</label>
                        <input type="text" name="cin" id="cin" className="w-full border rounded-lg p-2" value={editedInfraction.cin || ''} onChange={(e) => setEditedInfraction({ ...editedInfraction, cin: e.target.value })} readOnly={!!editedInfraction.customer} />
                      </div>
                      <div>
                        <label htmlFor="permis" className="block text-sm font-medium text-gray-700 mb-1">Permis</label>
                        <input type="text" name="permis" id="permis" className="w-full border rounded-lg p-2" value={editedInfraction.permis || ''} onChange={(e) => setEditedInfraction({ ...editedInfraction, permis: e.target.value })} readOnly={!!editedInfraction.customer} />
                      </div>
                      <div>
                        <label htmlFor="passeport" className="block text-sm font-medium text-gray-700 mb-1">Passeport</label>
                        <input type="text" name="passeport" id="passeport" className="w-full border rounded-lg p-2" value={editedInfraction.passeport || ''} onChange={(e) => setEditedInfraction({ ...editedInfraction, passeport: e.target.value })} readOnly={!!editedInfraction.customer} />
                      </div>
                      <div>
                        <label htmlFor="telephone" className="block text-sm font-medium text-gray-700 mb-1">Téléphone</label>
                        <input type="text" name="telephone" id="telephone" className="w-full border rounded-lg p-2" value={editedInfraction.telephone || ''} onChange={(e) => setEditedInfraction({ ...editedInfraction, telephone: e.target.value })} readOnly={!!editedInfraction.customer} />
                      </div>
                      <div>
                        <label htmlFor="telephone2" className="block text-sm font-medium text-gray-700 mb-1">Téléphone 2</label>
                        <input type="text" name="telephone2" id="telephone2" className="w-full border rounded-lg p-2" value={editedInfraction.telephone2 || ''} onChange={(e) => setEditedInfraction({ ...editedInfraction, telephone2: e.target.value })} readOnly={!!editedInfraction.customer} />
                      </div>
                      <div>
                        <label htmlFor="type" className="block text-sm font-medium text-gray-700 mb-1">Type de Client</label>
                        <select name="type" id="type" className="w-full border rounded-lg p-2" value={editedInfraction.type || 'particular'} onChange={(e) => setEditedInfraction({ ...editedInfraction, type: e.target.value as 'professional' | 'particular' })} disabled={!!editedInfraction.customer}>
                          <option value="particular">Particulier</option>
                          <option value="professional">Professionnel</option>
                        </select>
                      </div>
                      {editedInfraction.type === 'professional' && (
                        <div>
                          <label htmlFor="societe" className="block text-sm font-medium text-gray-700 mb-1">Société</label>
                          <input type="text" name="societe" id="societe" className="w-full border rounded-lg p-2" value={editedInfraction.societe || ''} onChange={(e) => setEditedInfraction({ ...editedInfraction, societe: e.target.value })} readOnly={!!editedInfraction.customer} />
                        </div>
                      )}
                    </div>
                    <div className="mt-4">
                      <h4 className="font-medium mb-2">Pièces Jointes:</h4>
                      <FileUploader api_url={API_URL_INFRACTIONS} existingDocuments={editedInfraction.documents || []} newFiles={newAttachmentFiles} onNewFilesChange={setNewAttachmentFiles} onRemoveExistingDocument={(doc) => handleRemoveExistingDocument(selectedInfraction._id, doc)} />
                    </div>
                  </div>
                </form>
              ) : (
                <div className="p-4 space-y-4">
                  {selectedInfraction.vehicle && typeof selectedInfraction.vehicle === 'object' ? (
                    <div className="p-4 border-b">
                      <h3 className="font-medium mb-2">Véhicule</h3>
                      <div className="flex items-center space-x-4">
                        {selectedInfraction.vehicle.imageUrl ? (
                          <img
                            src={selectedInfraction.vehicle.imageUrl.startsWith('data:') ? selectedInfraction.vehicle.imageUrl : `${API_URL}/${selectedInfraction.vehicle.imageUrl.replace(/\\/g, '/').replace(/^\//, '')}`}
                            alt={`${selectedInfraction.vehicle.brand || 'N/A'} ${selectedInfraction.vehicle.model || 'N/A'}`}
                            className="w-24 h-24 object-cover rounded-lg shadow"
                          />
                        ) : (
                          <div className="w-24 h-24 bg-gray-100 rounded-lg flex items-center justify-center shadow">
                            <Car size={48} className="text-gray-400" />
                          </div>
                        )}
                        <div>
                          <p className="font-bold text-lg">{selectedInfraction.vehicle.brand || 'N/A'} {selectedInfraction.vehicle.model || 'N/A'}</p>
                          <p className="text-sm text-gray-600">{selectedInfraction.vehicle.licensePlate || 'N/A'}</p>
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className="p-4 border-b">
                      <h3 className="font-medium mb-2">Véhicule</h3>
                      <div className="flex items-center space-x-4">
                        <div className="w-24 h-24 bg-gray-100 rounded-lg flex items-center justify-center shadow">
                          <Car size={48} className="text-gray-400" />
                        </div>
                        <div>
                          <p className="font-bold text-lg">N/A</p>
                          <p className="text-sm text-gray-600">N/A</p>
                        </div>
                      </div>
                    </div>
                  )}
                  <div>
                    <p className="text-sm text-gray-500">N° Infraction</p>
                    <p className="font-medium">{selectedInfraction.infractionNumber || '-'}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">Date Infraction</p>
                    <p className="font-medium">{formatDateToFrench(selectedInfraction.infractionDate) || '-'}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">Heure Infraction</p>
                    <p className="font-medium">{selectedInfraction.timeInfraction || '-'}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">Fait à</p>
                    <p className="font-medium">{selectedInfraction.location || '-'}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">Fait le</p>
                    <p className="font-medium">{formatDateToFrench(selectedInfraction.date) || '-'}</p>
                  </div>
                  
                  <div className="p-4 border-t mt-4">
                    <h3 className="font-medium mb-2">Informations Client</h3>
                    {selectedInfraction.customer ? (
                      <>
                        <p className="font-medium">
                          {`${selectedInfraction.customer.prenomFr || ''} ${selectedInfraction.customer.nomFr || ''}`.trim() || 'N/A'}
                        </p>
                        <p className="text-sm text-gray-500">CIN: {selectedInfraction.cin || 'N/A'}</p>
                        <p className="text-sm text-gray-500">Permis: {selectedInfraction.permis || 'N/A'}</p>
                        {selectedInfraction.passeport && <p className="text-sm text-gray-500">Passeport: {selectedInfraction.passeport}</p>}
                        <p className="text-sm text-gray-500">Téléphone: {selectedInfraction.telephone || 'N/A'}</p>
                        {selectedInfraction.telephone2 && <p className="text-sm text-gray-500">Téléphone 2: {selectedInfraction.telephone2}</p>}
                        <p className="text-sm text-gray-500">Type: {selectedInfraction.type === 'professional' ? 'Professionnel' : 'Particulier'}</p>
                        {selectedInfraction.type === 'professional' && <p className="text-sm text-gray-500">Société: {selectedInfraction.societe}</p>}
                      </>
                    ) : (
                      <p className="font-medium">N/A</p>
                    )}
                  </div>

                  <div className="mt-4">
                    <h4 className="font-medium mb-2">Pièces Jointes:</h4>
                    {selectedInfraction.documents && selectedInfraction.documents.length > 0 ? (
                      <FileUploader api_url={API_URL_INFRACTIONS} existingDocuments={selectedInfraction.documents} newFiles={[]} onNewFilesChange={() => {}} onRemoveExistingDocument={() => Promise.resolve()} label="" readOnly={true} />
                    ) : (
                      <p className="text-sm text-gray-500">Aucun document</p>
                    )}
                  </div>
                </div>
              )}
            </div>
          ) : (
            <div className="bg-white shadow rounded-lg p-6 text-center">
              <AlertTriangle size={48} className="mx-auto mb-4 text-gray-400" />
              <p>Aucune infraction sélectionnée</p>
            </div>
          )}
        </div>
      </div>
      
      {showModalForm && (
        <InfractionForm 
          onSubmit={selectedInfraction ? handleUpdateInfraction : handleAddInfraction}
          onClose={() => setShowModalForm(false)}
          initialData={selectedInfraction}
          vehicles={vehicles}
          customers={customers}
          onRemoveExistingDocument={handleRemoveExistingDocument}
        />
      )}
    </div>
  );
};

export default Infractions;
